definitions:
  db.Song:
    properties:
      group_name:
        type: string
      id:
        type: string
      link:
        type: string
      name:
        type: string
      release_date:
        type: string
      text:
        type: string
    type: object
  models.AddSongRequest:
    properties:
      group_name:
        type: string
      link:
        type: string
      name:
        type: string
      release_date:
        type: string
      text:
        type: string
    required:
    - group_name
    - link
    - name
    - release_date
    - text
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.UpdateSongRequest:
    properties:
      group_name:
        type: string
      id:
        type: string
      link:
        type: string
      name:
        type: string
      release_date:
        type: string
      text:
        type: string
    required:
    - group_name
    - id
    - link
    - name
    - release_date
    - text
    type: object
host: localhost:8080
info:
  contact: {}
  description: Song Library API in Go using Gin and Swagger
  version: "1.0"
paths:
  /songs:
    get:
      description: Retrieve a list of songs in a paginated manner. Provide page_id
        and page_size as query parameters.
      parameters:
      - description: Page number starting from 1
        in: query
        name: page_id
        type: integer
      - description: Number of items per page
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of songs
          schema:
            items:
              $ref: '#/definitions/db.Song'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: List all songs
    post:
      consumes:
      - application/json
      description: Add a new song to the library by providing its name, release date,
        text, link, and group name.
      parameters:
      - description: Request body to add a new song
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AddSongRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added the song
          schema:
            $ref: '#/definitions/db.Song'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Song already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Add a new song
    put:
      consumes:
      - application/json
      description: Update the details of an existing song by providing its ID and
        new details in the request body.
      parameters:
      - description: Request body with updated song details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSongRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the song
          schema:
            $ref: '#/definitions/db.Song'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: No such song found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a song
  /songs/{id}:
    delete:
      description: Delete an existing song by providing its ID as a path parameter.
      parameters:
      - description: Song UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the song
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: No such song found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a song
    get:
      description: Retrieve the lyrics of a specific song by its UUID. The lyrics
        are paginated by verses.
      parameters:
      - description: Song UUID
        in: path
        name: id
        required: true
        type: string
      - description: Page number starting from 1
        in: query
        name: page_id
        type: integer
      - description: Number of verses per page
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: A list of verses
          schema:
            items:
              type: string
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: No lyrics found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get song lyrics
  /songs/info:
    get:
      description: Get a specific song by providing the group and song name as query
        parameters.
      parameters:
      - description: Group name
        in: query
        name: group
        required: true
        type: string
      - description: Song name
        in: query
        name: song
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The requested song
          schema:
            $ref: '#/definitions/db.Song'
        "404":
          description: No such song found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a song
swagger: "2.0"
