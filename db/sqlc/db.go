// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addSongStmt, err = db.PrepareContext(ctx, addSong); err != nil {
		return nil, fmt.Errorf("error preparing query AddSong: %w", err)
	}
	if q.deleteSongStmt, err = db.PrepareContext(ctx, deleteSong); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSong: %w", err)
	}
	if q.getSongStmt, err = db.PrepareContext(ctx, getSong); err != nil {
		return nil, fmt.Errorf("error preparing query GetSong: %w", err)
	}
	if q.getSongLyricsStmt, err = db.PrepareContext(ctx, getSongLyrics); err != nil {
		return nil, fmt.Errorf("error preparing query GetSongLyrics: %w", err)
	}
	if q.listSongsStmt, err = db.PrepareContext(ctx, listSongs); err != nil {
		return nil, fmt.Errorf("error preparing query ListSongs: %w", err)
	}
	if q.updateSongStmt, err = db.PrepareContext(ctx, updateSong); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSong: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addSongStmt != nil {
		if cerr := q.addSongStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addSongStmt: %w", cerr)
		}
	}
	if q.deleteSongStmt != nil {
		if cerr := q.deleteSongStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSongStmt: %w", cerr)
		}
	}
	if q.getSongStmt != nil {
		if cerr := q.getSongStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSongStmt: %w", cerr)
		}
	}
	if q.getSongLyricsStmt != nil {
		if cerr := q.getSongLyricsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSongLyricsStmt: %w", cerr)
		}
	}
	if q.listSongsStmt != nil {
		if cerr := q.listSongsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSongsStmt: %w", cerr)
		}
	}
	if q.updateSongStmt != nil {
		if cerr := q.updateSongStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSongStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                DBTX
	tx                *sql.Tx
	addSongStmt       *sql.Stmt
	deleteSongStmt    *sql.Stmt
	getSongStmt       *sql.Stmt
	getSongLyricsStmt *sql.Stmt
	listSongsStmt     *sql.Stmt
	updateSongStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                tx,
		tx:                tx,
		addSongStmt:       q.addSongStmt,
		deleteSongStmt:    q.deleteSongStmt,
		getSongStmt:       q.getSongStmt,
		getSongLyricsStmt: q.getSongLyricsStmt,
		listSongsStmt:     q.listSongsStmt,
		updateSongStmt:    q.updateSongStmt,
	}
}
